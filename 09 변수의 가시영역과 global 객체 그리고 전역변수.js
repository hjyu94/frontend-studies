/*****************************************************************************************
    ### var 선언 변수는 정적인 방식으로 생성
    
    alert(a);
    var a = 1;

    --> undefined

 ******************************************************************************************/

console.log(a);
var a = 1;

/******************************************************************************************
    undefined 가 출력되었다는 것은 a 라는 변수가 선언은 됐다. 그런데 값을 할당하지 않았다는 얘기임.

    호출이 선언 보다 위에 있을 수 있는데 이 경우는
    이 지역 자체가 실행되기 위해서는 지역 내에서 선언되고 있는 변수들이 모두 메모리에 올라간 상태에서 
    명령어를 위에서 아래로 읽으며 실행되게 된다.

    따라서 console.log(a); 가 실행되기 전에 변수 a 가 준비가 되어 있고 
    변수 a 의 값이 어디에 선언(할당)되어 있던, 준비는 되어 있기 때문에 
    호출하는 시점이 선언부보다 위에 있더라도 변수 선언은 된 상태라는 얘기. (값만 없다)

    명령어 실행 전에 var 변수들을 쭉 메모리에 undefined 값으로 올려놓는다는 얘기
 ******************************************************************************************/

 /******************************************************************************************
    ### global 변수는 동적인 방식으로 생성

    b = 2;
    alert(b);

    --> 2
    
    (var, ...) 선언하지 않고 b 를 썼을 때에는 b 는 전역 객체의 속성이 된다.
    브라우저 상에서는 window 라는 전역객체가 있는데 전역 객체의 속성으로 보는 것.
    
    객체에 속성이 붙을 수 있듯이 cf) var ob = new Object(); ob[b] = 2;
    전역객체 window 에 속성이 붙는 것.
******************************************************************************************/

b = 2;
console.log(b); // window.b 호출

/******************************************************************************************
    ### global 변수는 동적인 방식으로 생성

    console.log(c);
    c = 3;

    --> ERROR

    사전에 변수를 선언한 적이 없고, 전역 변수는 동적인 방식으로 생성되는 것이기 때문에
    console.log(c); 를 호출할 시점에서는 c 가 무엇인지 알 수가 없다.

    cf) var 변수와 다름 주의
******************************************************************************************/

// console.log(c); // ERROR
c = 3;

/******************************************************************************************
 * 자바스크립트의 낭설 중의 하나는 변수 선언할 필요가 없어~ 
 * ㄴㄴ. 이 경우는 변수 선언과 다른 의미가 있는 것이다! (전역변수에 속성을 붙이는 것)
******************************************************************************************/

/******************************************************************************************
    ### 지역변수와 전역변수가 충돌 될 때?
    지역변수가 더 우선순위가 높다
  
    var f1 = function() {
        a = 1;      // 이 때 a는 window.a (전역변수의 속성)
        var a = 3;  // 이 때 이후로 a는 지역변수
        a++;
        alert(a);
    }
******************************************************************************************/

/******************************************************************************************
    ### 동일한 변수를 여러 번 선언하는 경우는?

    var a = 1;
    var a = 2;
    alert(a);

    왠만한 언어는 ERROR를 내지만 자바스크립트는 에러가 나지 않는다.
    2 가 잘 출력된다.
******************************************************************************************/

var a = 1;
var a = 2;
console.log(a);

/******************************************************************************************
    ### 중괄호를 사용하는 경우

    {
        var a = 1;
    }
    alert(a);
    
    일반적으로는 중괄호는 변수를 사용할 수 있는 영역으로써 생명 주기, 생명 선을 담당.
    따라서 중괄호 안에서 선언한 변수를 밖에서 사용할 수 없다.    
    
    하지만! 자바 스크립트는 변수를 지역화하는게 없다.
    중괄호가 변수 영역을 나누지 않는다.

    따라서 === var a=1; alert(a);
******************************************************************************************/

{
    var d1 = 4;
}
console.log(d1); // 4


console.log(d2); // undefined (변수가 만들어져 있기는 하니까 ERROR는 아님)
{
    var d2 = 4;
}

/******************************************************************************************
    ### 함수 안에서 선언한 global 변수

    그러면 자바 스크립트는 지역 변수라는 개념이 없나? 괄호가 의미가 없으니까? 그건 아님
    유일하게 지역으로 사용되는 괄호는 function 에 사용되는 괄호이다.

    자바 스크립트에서는 함수 영역만({}) 변수 영역을 나눔!
******************************************************************************************/

// ### EX1
function f1() {
    var e = 5;
}
f1(); // 호출 할 때 변수 e 가 선언되고, 호출이 끝날 시점에 변수 e 는 다시 사라진다.
// console.log(e); // ERROR // 따라서 함수 내의 지역변수를 함수 밖에서 사용할 수 없다.


// ### EX2
// 함수 내에서 전역 객체의 속성을 지정하는 경우: 함수를 먼저 불러야한다.
function f2() {
    f = 6; // 변수 선언이 아니라 전역객체의 속성 f 값으로 6을 지정한 것
}
// console.log(f); // ERROR 
f2();

function f3() {
    g = 7;
}
f3();
console.log(g); // ERROR X


// ### EX3-1
function f4() { h = 8; }
function f5() { console.log(h); }
f4(); 
f5(); // 문제 없음


// ### EX3-2
function f6() { var i = 9; } // 전역 객체에 속성값을 입력한 것이 아니라, 지역 변수 i를 선언한 것. f6 호출 끝날 시점에 사라짐
function f7() { console.log(i); }
f6(); 
// f7(); // ERROR // i is not defined.


/******************************************************************************************
    클로저 미리보기
******************************************************************************************/
val = 0;
function g1() {
    var val = 1;
    g2();
    function g2() {
        var val = 2;
        g3();
        function g3() {
            val = 3; // g2의 val? g1의 val? 전역함수의 속성값 val?
        }
    }
}
g1();
console.log(val); // ??????? // answer: 0